---
import ProductButton from "@/components/ProductButton";
import { ProductImageCarousel } from "@/components/ProductImageCarousel";
import { ProductPrice } from "@/components/ProductPrice";
import Card from "@/components/ui/Card";
import { applyDefaultCacheHeaders } from "@/lib/config";
import { filterProductById } from "@/store/products";
import { getImage } from "astro:assets";

const { id } = Astro.params;

if (!id) return Astro.redirect("/404");

applyDefaultCacheHeaders(Astro.response.headers);

const productResponse = await filterProductById({ id });

if (!productResponse) {
  return Astro.redirect("/");
}

const product = productResponse;

const productImageSrcs = [product.imageUrl, ...product.images];

const productImages = await Promise.all(
  productImageSrcs.map((src) =>
    getImage({
      src: new URL(src, Astro.url.origin).href,
      alt: product.name,
      widths: [400, 700, 960],
      sizes: "(min-width: 1280px) 960px, 100vw",
      width: 1200,
      height: 800,
    })
  )
);
const firstImage = productImages[0];
if (!firstImage) throw new Error(`No images found for product ${id}`);
---

<section class="mx-auto mt-24 w-full max-w-[1200px] gap-8">
  <div
    class="mx-auto mb-16 mt-8 grid max-w-lg grid-cols-1 lg:mx-0 lg:max-w-none lg:grid-cols-[1fr_32rem] lg:gap-32 gap-8"
  >
    <div class="relative">
      {
        productImages.length > 1 ? (
          <>
            <div>
              <ProductImageCarousel client:idle {productImages} />
            </div>
          </>
        ) : (
          <Card class="aspect-square justify-center">
            <img
              src={firstImage.src}
              srcset={firstImage.srcSet.attribute}
              sizes={firstImage.attributes.sizes}
              alt={product.name}
              class="object-cover rounded-md "
            />
          </Card>
        )
      }
    </div>

    <header class="flex flex-col items-start gap-2 z-10 relative">
      {
        product.discount > 0 ? (
          <p class="rounded-full bg-red-100 px-3 py-[6px] text-sm  font-medium text-red-600">
            {Math.round(
              (1 - (product.price - product.discount) / product.price) * 100
            )}
            % descuento
          </p>
        ) : null
      }
      <h1 class="text-primary text-3xl font-bold md:text-4xl">
        {product.name}
      </h1>
      <p class="text-xl text-primary md:text-2xl">
        <ProductPrice
          class="gap-1 font-semibold flex-col"
          price={product.price}
          discount={product.discount}
        />
      </p>
      <p class="mt-4 text-lg text-white text-balance">
        {product.description}
      </p>
    </header>
    <footer>
      <ProductButton product={product} client:load />
    </footer>
  </div>
</section>
